{"version":3,"sources":["index.js"],"names":["GameLevel","rows","cols","gameSpeed","fields","UIController","popup","document","querySelector","root","documentElement","board","countdownContainer","gamePoints","gameTime","highscores","countdownEl","highscoresPoints","time","textContent","points","classList","toggle","property","value","style","setProperty","toString","template","moleIMG","i","insertAdjacentHTML","boardFields","querySelectorAll","fieldNumber","mole","state","dataset","active","toggleMole","toggleMoleState","GameController","max","Math","floor","random","App","gameCtrl","UICtrl","levelList","startAgainBtn","binedSetLevel","setLevel","bind","bindInit","init","resizeApp","resize","window","addEventListener","vh","innerHeight","timer","removeEventListener","resetPoints","startCountingTime","GameTime","displayCountdownTime","togglePopup","enableLevels","toggleHighscores","disableStartAgainBtn","removeBoard","clickMole","e","target","tagName","closest","currentPoints","addPoint","displayPoints","moleNumber","intervalId","setInterval","currentTimeLeft","displayTimeLeft","clearInterval","endGame","disableLevels","gameLevel","setGameSpeed","generateBoard","queryBoardFields","toggleCountdown","countdown","stopMoles","enableStartAgainBtn","displayHighscores","className","gameLevelsList","level","startGame","interval","generateMole","countdownTimer","activateBtns","MoleIntervalId","number","currentField","randomMole","checkMole","toggleMoleAndState","setTimeout","removeMoleState","undefined","push"],"mappings":"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","file":"src.4bbcf19f.js","sourceRoot":"..\\src","sourcesContent":["\"use strict\";\r\n\r\nimport \"./scss/main.scss\";\r\nimport moleIMG from \"./assets/mole.svg\";\r\n\r\nclass GameLevel {\r\n  constructor(rows, cols, gameSpeed) {\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n    this.gameSpeed = gameSpeed;\r\n    this.fields = this.rows * this.cols;\r\n  }\r\n}\r\n\r\nclass UIController {\r\n  constructor() {\r\n    this.popup = document.querySelector(\".popup\");\r\n    this.root = document.documentElement;\r\n    this.board = document.querySelector(\".game__board\");\r\n    this.countdownContainer = document.querySelector(\".countdown\");\r\n    this.gamePoints = document.querySelector(\".stats__points\");\r\n    this.gameTime = document.querySelector(\".stats__time\");\r\n    this.highscores = document.querySelector(\".highscores\");\r\n    this.countdownEl = document.querySelector(\".countdown__timer\");\r\n    this.highscoresPoints = document.querySelector(\".highscores__score\");\r\n  }\r\n  displayCountdownTime(time) {\r\n    this.countdownEl.textContent = time;\r\n  }\r\n\r\n  displayPoints(points) {\r\n    this.gamePoints.textContent = points;\r\n  }\r\n\r\n  displayTimeLeft(time) {\r\n    this.gameTime.textContent = time;\r\n  }\r\n\r\n  displayHighscores(points) {\r\n    this.highscoresPoints.textContent = points;\r\n  }\r\n\r\n  toggleHighscores() {\r\n    this.highscores.classList.toggle(\"hidden\");\r\n  }\r\n\r\n  togglePopup() {\r\n    this.popup.classList.toggle(\"hidden\");\r\n  }\r\n\r\n  setProperty(property, value) {\r\n    this.root.style.setProperty(`--${property}`, `${value.toString()}`);\r\n  }\r\n  setGameSpeed(property, value) {\r\n    this.root.style.setProperty(`--${property}`, `${value}ms`);\r\n  }\r\n\r\n  generateBoard(fields) {\r\n    const template = `<li class=\"game__field\" data-active=\"false\">\r\n      <img src=\"${moleIMG}\" alt=\"Whack a mole\" />\r\n      <figcaption class=\"hole\">&nbsp;</figcaption>\r\n    </li>`;\r\n    for (let i = 0; i < fields; i++) {\r\n      this.board.insertAdjacentHTML(\"beforeend\", template);\r\n    }\r\n  }\r\n\r\n  removeBoard() {\r\n    this.board.textContent = \"\";\r\n  }\r\n\r\n  toggleCountdown() {\r\n    this.countdownContainer.classList.toggle(\"hidden\");\r\n  }\r\n\r\n  queryBoardFields() {\r\n    this.boardFields = document.querySelectorAll(\".game__field\");\r\n  }\r\n\r\n  toggleMole(fieldNumber) {\r\n    this.boardFields[fieldNumber]\r\n      .querySelector(\"img\")\r\n      .classList.toggle(\"active\");\r\n  }\r\n\r\n  toggleMoleState(mole) {\r\n    let state = this.boardFields[mole].dataset.active;\r\n    this.boardFields[mole].dataset.active =\r\n      state === \"false\" ? \"true\" : \"false\";\r\n  }\r\n\r\n  removeMoleState(mole) {\r\n    this.boardFields[mole].dataset.active = \"false\";\r\n  }\r\n\r\n  toggleMoleAndState(mole) {\r\n    this.toggleMole(mole);\r\n    this.toggleMoleState(mole);\r\n  }\r\n}\r\n\r\nclass GameController {\r\n  constructor() {}\r\n\r\n  randomMole(max) {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  resetPoints() {\r\n    this.points = 0;\r\n  }\r\n\r\n  addPoint() {\r\n    return ++this.points;\r\n  }\r\n\r\n  set startCountingTime(time) {\r\n    this.time = time;\r\n  }\r\n}\r\n\r\nclass App {\r\n  constructor() {\r\n    this.gameCtrl = new GameController();\r\n    this.UICtrl = new UIController();\r\n    this.levelList = document.querySelector(\".game__controllers-list\");\r\n    this.startAgainBtn = document.querySelector(\".btn__start-again\");\r\n    this.binedSetLevel = this.setLevel.bind(this);\r\n    this.bindInit = this.init.bind(this);\r\n    this.resizeApp();\r\n\r\n    this.init();\r\n  }\r\n\r\n  resizeApp() {\r\n    this.resize();\r\n    window.addEventListener(\"resize\", this.resize);\r\n  }\r\n\r\n  resize() {\r\n    let vh = window.innerHeight * 0.01;\r\n    document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\r\n  }\r\n\r\n  set GameTime(time) {\r\n    this.timer = time;\r\n  }\r\n\r\n  get GameTime() {\r\n    return this.timer;\r\n  }\r\n  enableLevels() {\r\n    this.levelList.addEventListener(\"click\", this.binedSetLevel);\r\n  }\r\n  disableLevels() {\r\n    this.levelList.removeEventListener(\"click\", this.binedSetLevel);\r\n  }\r\n\r\n  enableStartAgainBtn() {\r\n    this.startAgainBtn.addEventListener(\"click\", this.bindInit);\r\n  }\r\n\r\n  disableStartAgainBtn() {\r\n    this.startAgainBtn.removeEventListener(\"click\", this.bindInit);\r\n  }\r\n\r\n  init() {\r\n    this.gameCtrl.resetPoints();\r\n    this.gameCtrl.startCountingTime = 3;\r\n    this.GameTime = 30;\r\n    this.UICtrl.displayCountdownTime(this.gameCtrl.time);\r\n    this.UICtrl.togglePopup();\r\n    this.enableLevels();\r\n    this.UICtrl.toggleHighscores();\r\n    this.disableStartAgainBtn();\r\n    this.UICtrl.removeBoard();\r\n  }\r\n\r\n  activateBtns() {\r\n    document\r\n      .querySelector(\".game__board\")\r\n      .addEventListener(\"click\", this.clickMole.bind(this));\r\n  }\r\n\r\n  clickMole(e) {\r\n    if (e.target.tagName === \"UL\") {\r\n      return;\r\n    }\r\n    const el = e.target.closest(\".game__field\");\r\n    if (el.dataset.active === \"true\") {\r\n      const currentPoints = this.gameCtrl.addPoint();\r\n      this.UICtrl.displayPoints(currentPoints);\r\n      this.UICtrl.toggleMoleState(this.moleNumber);\r\n    }\r\n  }\r\n\r\n  countdownTimer() {\r\n    const intervalId = setInterval(() => {\r\n      let currentTimeLeft = this.GameTime;\r\n      currentTimeLeft--;\r\n      this.GameTime = currentTimeLeft;\r\n      this.UICtrl.displayTimeLeft(this.GameTime);\r\n      if (!this.timer) {\r\n        clearInterval(intervalId);\r\n        this.endGame();\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  startGame() {\r\n    this.disableLevels();\r\n    this.UICtrl.displayPoints(this.gameCtrl.points);\r\n    this.UICtrl.displayTimeLeft(this.GameTime);\r\n    this.UICtrl.setProperty(\"columns\", this.gameLevel.cols);\r\n    this.UICtrl.setProperty(\"rows\", this.gameLevel.rows);\r\n    this.UICtrl.setGameSpeed(\"animationSpeed\", this.gameLevel.gameSpeed);\r\n    this.UICtrl.generateBoard(this.gameLevel.fields);\r\n    this.UICtrl.queryBoardFields();\r\n    this.UICtrl.toggleCountdown();\r\n    this.UICtrl.togglePopup();\r\n    this.countdown();\r\n  }\r\n\r\n  endGame() {\r\n    this.UICtrl.toggleHighscores();\r\n    this.stopMoles();\r\n    this.enableStartAgainBtn();\r\n    this.UICtrl.displayHighscores(this.gameCtrl.points);\r\n  }\r\n\r\n  setLevel(e) {\r\n    if (e.target.className === \"btn\") {\r\n      this.gameLevel = gameLevelsList[e.target.dataset.level];\r\n      this.startGame();\r\n    }\r\n  }\r\n\r\n  countdown() {\r\n    let interval;\r\n    const intervalId = setInterval(() => {\r\n      this.gameCtrl.time--;\r\n      this.UICtrl.displayCountdownTime(this.gameCtrl.time);\r\n      if (this.gameCtrl.time === 0) {\r\n        this.generateMole();\r\n        this.countdownTimer();\r\n        interval = setInterval(() => {\r\n          this.generateMole();\r\n        }, this.gameLevel.gameSpeed);\r\n        this.UICtrl.toggleCountdown();\r\n        clearInterval(intervalId);\r\n        this.activateBtns();\r\n        this.MoleIntervalId = interval;\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  set moleNumber(number) {\r\n    this.mole = number;\r\n  }\r\n\r\n  get moleNumber() {\r\n    return this.mole;\r\n  }\r\n\r\n  stopMoles() {\r\n    clearInterval(this.MoleIntervalId);\r\n  }\r\n\r\n  generateMole() {\r\n    //Get random mole\r\n    const currentField = this.gameCtrl.randomMole(this.gameLevel.fields);\r\n    //check if active mole field is different than last move\r\n    if (this.checkMole(currentField)) {\r\n      this.moleNumber = currentField;\r\n      //display mole in field\r\n      this.UICtrl.toggleMoleAndState(currentField);\r\n      setTimeout(() => {\r\n        this.UICtrl.toggleMole(currentField);\r\n        this.UICtrl.removeMoleState(currentField);\r\n      }, this.gameLevel.gameSpeed);\r\n    } else {\r\n      this.generateMole();\r\n    }\r\n  }\r\n\r\n  checkMole(number) {\r\n    if (this.mole === undefined || this.mole !== number) {\r\n      return 1;\r\n    }\r\n  }\r\n}\r\n\r\nconst gameLevelsList = [];\r\n\r\ngameLevelsList.push(new GameLevel(3, 3, 1500));\r\ngameLevelsList.push(new GameLevel(3, 4, 1200));\r\ngameLevelsList.push(new GameLevel(4, 5, 800));\r\n\r\nnew App();\r\n"]}